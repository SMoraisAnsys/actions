name: "Documentation deploy stable version"
description: "Deploy stable documentation to GitHub pages"

inputs:
  cname:
    description: 'The canonical name of the documentation website'
    required: true
    type: string
  version-config:
    description: 'Path to the JSON file specifying version configuration'
    default: 'release/version_mapper.json'
    required: false
    type: string
  token:
    description: "Required token for documentation deployment"
    required: true
    type: string
  python-version:
    description: 'Desired Python version'
    default: '3.10'
    required: false
    type: string

runs:
  using: "composite"
  steps:

    - name: "Checkout project in the GitHub Pages branch"
      uses: actions/checkout@v3
      with:
        ref: 'gh-pages'

    - name: "List gh-pages content"
      shell: bash
      run: ls -R

    - name: "Prepare destination folder"
      shell: bash
      run: |
        # Remove the 'v' at the beginning of the tag
        ref_name="${{ github.ref_name }}"
        version=${ref_name##*v}
        # Filter out the major and minor version numbers
        major=$(echo $version | cut -d. -f1)
        minor=$(echo $version | cut -d. -f2)
        folder=release/$major.$minor
        # Create a new folder for the version (remove existing one if required)
        if [[ -d $folder ]]; then rm -rf $folder; fi 
        mkdir -p $folder
        # Output the version
        echo "VERSION=$major.$minor" >> $GITHUB_ENV


    - name: "Download the HTML documentation artifact in release/${{ github.ref_name }}"
      uses: actions/download-artifact@v3
      with:
        name: documentation-html
        path: release/${{ env.VERSION }}
  
    - name: "Set up Python ${{ inputs.python-version }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: "Install system dependencies for updating version table"
      shell: bash
      run: |
        sudo apt-get install curl
        python -m pip install -U pip

    - name: "Get the version_mapper.py utility"
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/pyansys/actions/main/scripts/version-mapper.py -o version-mapper.py

    - name: "Update the version JSON file"
      shell: bash
      run: | 
        python version-mapper.py -cname ${{ inputs.cname }} -version ${{ env.VERSION }} -filename ${{ inputs.version-config }}
        # Remove the scrip to avoid Git tracking it
        rm version-mapper.py

    - name: "Commit new changes (if required)"
      shell: bash
      run: |
          if [[ ! -z $(git status -s) ]];
          then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add release/
            git commit -m "DOC: add documentation for ${{ github.ref_name }}"
            git push
          fi
